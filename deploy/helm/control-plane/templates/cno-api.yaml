apiVersion: v1
kind: ServiceAccount
metadata:
  name: cno-api
  namespace: {{ .Release.Namespace }}
---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: cno-api
subjects:
  - kind: ServiceAccount
    name: cno-api
    namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "3"
    fluxcd.io/automated: 'true'
  labels:
    app: cno-api
  {{- range $key, $value := .Values.global.cnoAPI.labels }}
    {{ $key  }}: {{ $value  }}
  {{- end }}
  name: cno-api
  namespace: {{ .Release.Namespace }}
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: cno-api
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: cno-api
      {{- range $key, $value := .Values.global.cnoAPI.labels }}
        {{ $key  }}: {{ $value  }}
      {{- end }}
    spec:
      initContainers:
        - name: keycloak-check
          image: {{ .Values.keycloakConfig.image.name }}:{{ .Values.keycloakConfig.image.version }}
          command: ["/bin/sh","-c"]
          args:
            - |
              until $(curl --output /dev/null --silent --head --fail {{ .Values.keycloakConfig.service.protocol }}://{{ .Values.keycloakConfig.service.name }}:{{ .Values.keycloakConfig.service.port }}/auth/realms/cno); do
                echo keycloak unvailable `date`
                sleep 10
              done
              echo Successed: `date`
        - name: kafka-check
          image: {{ .Values.kafkaConfig.image.name }}:{{ .Values.kafkaConfig.image.version }}
          env:
            - name: KAFKA_BROKERS
              value: cno-kafka-cluster-kafka-bootstrap:9092
            - name: SERVER_URL
              value: {{ .Values.global.cnoAPI.protocol }}://cno-api.{{ .Values.expose.ingress.domain }}
            - name: UI_URL
              value: {{ .Values.global.cnoAPI.protocol }}://cno.{{ .Values.expose.ingress.domain }}
          command:
            - /bin/sh
            - -c
          args:
            - |
              while true; do
                 bin/kafka-console-producer.sh --bootstrap-server $KAFKA_BROKERS --topic cno-kafka-health-check &> /dev/null
                 if [[ $? == 0 ]]; then
                    echo Successed: `date`
                    break
                 fi
                 echo Kafka unvailable `date`
                 sleep 5
              done
      containers:
        - image: {{ .Values.global.cnoAPI.image.name }}:{{ .Values.global.cnoAPI.image.version }}
          imagePullPolicy: Always
          name: cno-api
          {{- if hasKey .Values.global.cnoAPI "resources" }}
          resources:
            {{- toYaml .Values.global.cnoAPI.resources | nindent 12 }}
          {{- end }}
          ports:
            - containerPort: 8080
              protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          env:
            - name: DEFAULT_SUPER_ADMIN_PASSWORD
              {{- if hasKey .Values.superadmin "secret" }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.superadmin.secret.name | quote }}
                  key: {{ default "PASSWORD" .Values.superadmin.secret.key | quote }}
              {{- else }}
              value: {{ .Values.superadmin.password }}
              {{- end }}
            - name: IN_CLUSTER
              value: "true"
            - name: SERVER_PORT
              value: "8080"
            - name: OIDC_REALM
              value: {{ .Values.keycloakConfig.realm }}
            - name: OIDC_SERVER_BASE_URL
              value: "{{ .Values.keycloakConfig.service.protocol }}://{{ .Values.keycloakConfig.service.name }}:{{ .Values.keycloakConfig.service.port }}"
            - name: OIDC_CLIENT_ID
              value: {{ .Values.keycloakConfig.client.id }}
            - name: OIDC_CLIENT_SECRET
              value: {{ .Values.keycloakConfig.client.secret | quote }}
            - name: KAFKA_BROKERS
              value: cno-kafka-cluster-kafka-bootstrap:9093
            - name: KAFKA_TlS_ENABLED
              value: "true"
            - name: KAFKA_TLS_SKIP_VERIFY
              value: "false"
            - name: KAFKA_VERBOSE
              value: "false"
            - name: CNO_NAMESPACE
              value:  {{ .Release.Namespace }}
            - name: KAFKA_CLUSTER_NAME
              value: cno-kafka-cluster
{{ include "cno-chart.databaseConfig" . | indent 12 }}
            - name: CREATE_DEFAULT_CLUSTER
              value: {{ .Values.agentConfig.defaultCluster | quote }}
            {{- if and (eq .Values.expose.type "nginx-ingress") }}
            - name: DEFAULT_EXTERNAL_BROKERS_URL
              value: broker-0-cno.{{ .Values.expose.ingress.domain }}:443
            - name: SERVER_URL
              value: https://cno-api.{{ .Values.expose.ingress.domain }}
            {{- end }}
            {{- if .Values.agentConfig.defaultCluster }}
            - name: DEFAULT_CLUSTER_ID
              value: {{ include "cno-chart.clusterAgentUuid" . }}
            - name: DEFAULT_CLUSTER_TYPE
              value: {{ .Values.agentConfig.defaultClusterType }}
            - name: DEFAULT_CLUSTER_API_SERVER_URL
              value: {{ .Values.cluster.apiUrl }}
            {{- end }}
            - name: KAFKA_CA_CERT
              value: /kafka/ca/ca.crt
            - name: KAFKA_CLIENT_CERT
              value: /kafka/user/user.crt
            - name: KAFKA_CLIENT_KEY
              value: /kafka/user/user.key
          volumeMounts:
            - name: kafka-user
              mountPath: /kafka/user
            - name: kafka-ca
              mountPath: /kafka/ca
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      serviceAccountName: cno-api
      volumes:
        - name: kafka-user
          secret:
            secretName: cno-kafka-superadmin
        - name: kafka-ca
          secret:
            secretName: cno-kafka-cluster-cluster-ca-cert


---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.global.cnoAPI.internalServiceName }}
  namespace: {{ .Release.Namespace }}
spec:
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  selector:
    app: cno-api
  sessionAffinity: None
  {{- if eq .Values.expose.type "loadbalancer" }}
  type: LoadBalancer
  {{- end }}
  {{- if eq .Values.expose.type "nodeport" }}
  type: NodePort
  {{- end }}
